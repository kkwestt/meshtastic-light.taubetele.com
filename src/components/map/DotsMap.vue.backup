<template>
  <div id="map">
    <!-- –°—á–µ—Ç—á–∏–∫ —É–∑–ª–æ–≤ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É -->
    <div class="node-counter">
      <span v-if="devices.length === 0">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
      <span v-else
        >–£–∑–ª–æ–≤: {{ devices.length }}, –ü–æ–∫–∞–∑–∞–Ω–æ: {{ visibleNodesCount }}</span
      >
    </div>
  </div>
</template>

<script setup>
import { onMounted, onUnmounted, ref } from "vue";
import {
  MAP_CONFIG,
  MAP_PRESETS,
  DEVICE_ROLES,
  HARDWARE_MODELS,
} from "../../utils/constants.js";
import { CONFIG } from "../../config.js";

const emit = defineEmits(["infoOpen"]);

let map;
const devices = ref([]);
const visibleNodesCount = ref(0); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤
let updateInterval = null;
let redrawTimeout = null;
let currentMarkers = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ device_id
let clusterer = null; // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
let clusteredMarkers = new Set(); // –ù–∞–±–æ—Ä ID –º–∞—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–µ

// URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DOTS_API_URL = "https://meshtasticback.taubetele.com/dots";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const fetchDevicesDataStreaming = async () => {
  try {
    const response = await fetch(DOTS_API_URL);
    const data = await response.json();

    if (data && data.data) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const currentTime = Date.now();
      const oneDayAgo = currentTime - 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

      const filteredDevices = Object.values(data.data).filter((device) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        return (
          device.last_updated &&
          device.last_updated > oneDayAgo &&
          device.latitude &&
          device.longitude
        ); // –¢–æ–ª—å–∫–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º devices.value –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      devices.value = filteredDevices;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const batchSize = 50; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞ —Ä–∞–∑

      for (let i = 0; i < filteredDevices.length; i += batchSize) {
        const batch = filteredDevices.slice(i, i + batchSize);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        batch.forEach((device) => {
          updateSingleDeviceMarker(device);
        });

        // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        if (i + batchSize < filteredDevices.length) {
          await new Promise((resolve) => setTimeout(resolve, 10));
        }
      }

      // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
      cleanupOldMarkers(filteredDevices);

      // console.log(
      //   `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${filteredDevices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ ${
      //     Object.keys(data.data).length
      //   }`
      // );
      return filteredDevices;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", error);
    return [];
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const updateSingleDeviceMarker = (device) => {
  if (!map || !device.latitude || !device.longitude) return;

  const useClustering = shouldUseClustering();

  // –ü—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ
  if (!useClustering) {
    const bounds = getMapBounds();
    if (bounds && !isPointInBounds(device.latitude, device.longitude, bounds)) {
      return; // –ù–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    }
  }

  const deviceId = device.device_id;
  const existingMarker = currentMarkers.get(deviceId);

  // –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (existingMarker && existingMarker.lastUpdated === device.last_updated) {
    return;
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (existingMarker) {
    if (clusteredMarkers.has(deviceId)) {
      clusterer.remove(existingMarker.placemark);
      clusteredMarkers.delete(deviceId);
    } else {
      map.geoObjects.remove(existingMarker.placemark);
    }
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
  const color = getMarkerColor(device);
  const placemark = new ymaps.Placemark(
    [device.latitude, device.longitude],
    {
      iconContent: formatValue(device.short_name, ""),
      balloonContentHeader: formatValue(
        device.short_name,
        device.long_name || device.hex_id
      ),
      balloonContentBody: createBalloonContent(device),
      hintContent: `${formatValue(
        device.short_name || device.long_name,
        device.hex_id
      )} (${
        color === "green" ? "–£–∑–µ–ª" : color === "blue" ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ–ª–∞–π–Ω"
      })`,
    },
    {
      preset: getTextMarkerPreset(color),
      hideIconOnBalloonOpen: false,
    }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä
  if (useClustering) {
    if (!clusterer) {
      initClusterer();
    }
    clusterer.add(placemark);
    clusteredMarkers.add(deviceId);
  } else {
    map.geoObjects.add(placemark);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –∫—ç—à–µ
  currentMarkers.set(deviceId, {
    placemark: placemark,
    lastUpdated: device.last_updated,
    device: device,
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤
  visibleNodesCount.value = currentMarkers.size;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
const cleanupOldMarkers = (currentDevices) => {
  const currentDeviceIds = new Set(currentDevices.map((d) => d.device_id));

  // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
  for (const [deviceId, markerData] of currentMarkers.entries()) {
    if (!currentDeviceIds.has(deviceId)) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å –∫–∞—Ä—Ç—ã
      if (clusteredMarkers.has(deviceId)) {
        clusterer.remove(markerData.placemark);
        clusteredMarkers.delete(deviceId);
      } else {
        map.geoObjects.remove(markerData.placemark);
      }
      currentMarkers.delete(deviceId);
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤
  visibleNodesCount.value = currentMarkers.size;
};

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
const fetchDevicesData = fetchDevicesDataStreaming;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
const getMarkerColor = (device) => {
  const currentTime = Date.now();
  const sixHoursAgo = currentTime - 6 * 60 * 60 * 1000; // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥

  // –ó–µ–ª–µ–Ω—ã–π - –µ—Å–ª–∏ gateway –∏ hex_id —Å–æ–≤–ø–∞–¥–∞—é—Ç (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —É–∑–ª—ã)
  if (device.gateway === device.hex_id) {
    return "green";
  }

  // –°–∏–Ω–∏–π - –æ–Ω–ª–∞–π–Ω (–º–µ–Ω–µ–µ 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
  if (device.last_updated > sixHoursAgo) {
    return "blue";
  }

  // –°–µ—Ä—ã–π - –æ—Ñ–ª–∞–π–Ω (–æ—Ç 6 –¥–æ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
  return "grey";
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —Ü–≤–µ—Ç—É
const getMarkerPreset = (color) => {
  switch (color) {
    case "green":
      return MAP_PRESETS.MQTT; // –ó–µ–ª–µ–Ω—ã–π
    case "blue":
      return MAP_PRESETS.ONLINE; // –°–∏–Ω–∏–π
    case "grey":
    default:
      return MAP_PRESETS.OFFLINE; // –°–µ—Ä—ã–π
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ —Ü–≤–µ—Ç—É
const getTextMarkerPreset = (color) => {
  switch (color) {
    case "green":
      return "islands#darkGreenStretchyIcon"; // –ó–µ–ª–µ–Ω—ã–π —Å —Ç–µ–∫—Å—Ç–æ–º
    case "blue":
      return "islands#blueStretchyIcon"; // –°–∏–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º
    case "grey":
    default:
      return "islands#greyStretchyIcon"; // –°–µ—Ä—ã–π —Å —Ç–µ–∫—Å—Ç–æ–º
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
const formatTime = (timestamp) => {
  if (!timestamp || timestamp === "undefined" || timestamp === 0) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ timestamp —á–∏—Å–ª–æ–º
  const numTimestamp = Number(timestamp);
  if (isNaN(numTimestamp)) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  const date = new Date(numTimestamp);
  if (isNaN(date.getTime())) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }

  return date.toLocaleString("ru-RU");
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
const formatValue = (value, defaultText = "–ù–µ —É–∫–∞–∑–∞–Ω–æ") => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã "–ø—É—Å—Ç—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π
  if (
    value === undefined ||
    value === null ||
    value === "" ||
    value === "undefined" ||
    value === "null" ||
    (typeof value === "number" && isNaN(value))
  ) {
    return defaultText;
  }
  return value;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–ª—É–Ω–∞
const createBalloonContent = (device) => {
  return `
    <div style="max-width: 300px; font-size: 12px;">
      <h4 style="margin: 0 0 10px 0; color: #333;">${formatValue(
        device.long_name,
        device.short_name || device.hex_id
      )}</h4>

      <div style="display: grid; grid-template-columns: auto 1fr; gap: 5px 10px; font-family: monospace;">
        <strong>ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> <span>${formatValue(
          device.device_id
        )}</span>
        <strong>Hex ID:</strong> <span>${formatValue(device.hex_id)}</span>
        <strong>–°–µ—Ä–≤–µ—Ä:</strong> <span>${formatValue(device.server)}</span>
        <strong>–®–ª—é–∑:</strong> <span>${formatValue(device.gateway)}</span>

        <strong>–®–∏—Ä–æ—Ç–∞:</strong> <span>${formatValue(
          device.latitude?.toFixed(6)
        )}</span>
        <strong>–î–æ–ª–≥–æ—Ç–∞:</strong> <span>${formatValue(
          device.longitude?.toFixed(6)
        )}</span>
        <strong>–í—ã—Å–æ—Ç–∞:</strong> <span>${formatValue(device.altitude)} –º</span>
        <strong>–°–ø—É—Ç–Ω–∏–∫–∏:</strong> <span>${formatValue(
          device.sats_in_view
        )}</span>

        <strong>–ú–æ–¥–µ–ª—å:</strong> <span>${formatValue(
          HARDWARE_MODELS[device.hw_model],
          `ID: ${device.hw_model}`
        )}</span>
        <strong>–†–æ–ª—å:</strong> <span>${formatValue(
          DEVICE_ROLES[device.role],
          `ID: ${device.role}`
        )}</span>

        <strong>–ë–∞—Ç–∞—Ä–µ—è:</strong> <span>${formatValue(
          device.battery_level
        )}%</span>
        <strong>–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</strong> <span>${formatValue(
          device.voltage
        )} –í</span>
        <strong>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–∞:</strong> <span>${formatValue(
          device.channel_utilization
        )}%</span>
        <strong>Air Util TX:</strong> <span>${formatValue(
          device.air_util_tx
        )}</span>
        <strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> <span>${formatValue(
          device.uptime_seconds
        )} —Å–µ–∫</span>

        <strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong> <span>${formatTime(
          device.last_updated
        )}</span>
        <strong>position_time:</strong> <span>${formatTime(
          device.position_time
        )}</span>
      </div>
    </div>
  `;
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞
const initClusterer = () => {
  if (clusterer) {
    return clusterer;
  }

  clusterer = new ymaps.Clusterer({
    preset: "islands#invertedBlueClusterIcons",
    groupByCoordinates: false,
    clusterDisableClickZoom: false,
    clusterHideIconOnBalloonOpen: false,
    geoObjectHideIconOnBalloonOpen: false,
    gridSize: 64, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ
    maxZoom: 20, // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –±–æ–ª—å—à–∏—Ö –∑—É–º–∞—Ö (8+)
    minZoom: 8, // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑—É–º–∞ 8
    minClusterSize: 2,
    clusterIconLayout: "default#cluster",
  });

  map.geoObjects.add(clusterer);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω
  console.log("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É");
  console.log(`   - gridSize: ${clusterer.options.get("gridSize")}`);
  console.log(`   - maxZoom: ${clusterer.options.get("maxZoom")}`);
  console.log(`   - preset: ${clusterer.options.get("preset")}`);

  return clusterer;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
const shouldUseClustering = () => {
  if (!map) return false;
  const zoom = map.getZoom();
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑—É–º–µ –±–æ–ª—å—à–µ 8 (–¥–∞–ª—å–Ω–∏–µ –≤–∏–¥—ã)
  // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–∏ –∑—É–º–µ 7 –∏ –º–µ–Ω—å—à–µ (–±–ª–∏–∑–∫–∏–µ –≤–∏–¥—ã)
  return zoom > 7;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –∫–∞—Ä—Ç—ã
const clearDeviceMarkers = () => {
  if (!map) return;

  if (clusterer) {
    clusterer.removeAll();
  }

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∫—ç—à–∞ –∏ –∫–∞—Ä—Ç—ã (–¥–ª—è –Ω–µ–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  for (const [deviceId, markerData] of currentMarkers.entries()) {
    if (!clusteredMarkers.has(deviceId)) {
      map.geoObjects.remove(markerData.placemark);
    }
  }
  currentMarkers.clear();
  clusteredMarkers.clear();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤
  visibleNodesCount.value = 0;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
const getMapBounds = () => {
  if (!map) return null;
  return map.getBounds();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
const isPointInBounds = (lat, lng, bounds) => {
  if (!bounds) return true;
  const [[southWest], [northEast]] = bounds;
  return (
    lat >= southWest &&
    lat <= northEast &&
    lng >= bounds[0][1] &&
    lng <= bounds[1][1]
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
const getVisibleDevices = () => {
  if (!devices.value.length) return [];

  const bounds = getMapBounds();
  if (!bounds) return devices.value;

  return devices.value.filter((device) => {
    if (!device.latitude || !device.longitude) return false;
    return isPointInBounds(device.latitude, device.longitude, bounds);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ (–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ)
const switchMarkerMode = () => {
  if (!map || !devices.value.length) return;

  const useClustering = shouldUseClustering();

  if (useClustering) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    if (!clusterer) {
      initClusterer();
    }

    // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –∑–∞–Ω–æ–≤–æ
    clusterer.removeAll();
    const allPlacemarks = [];

    devices.value.forEach((device) => {
      if (device.latitude && device.longitude) {
        const color = getMarkerColor(device);
        const placemark = new ymaps.Placemark(
          [device.latitude, device.longitude],
          {
            iconContent: formatValue(device.short_name, ""),
            balloonContentHeader: formatValue(
              device.short_name,
              device.long_name || device.hex_id
            ),
            balloonContentBody: createBalloonContent(device),
            hintContent: `${formatValue(
              device.short_name || device.long_name,
              device.hex_id
            )} (${
              color === "green"
                ? "–£–∑–µ–ª"
                : color === "blue"
                ? "–û–Ω–ª–∞–π–Ω"
                : "–û—Ñ–ª–∞–π–Ω"
            })`,
          },
          {
            preset: getTextMarkerPreset(color),
            hideIconOnBalloonOpen: false,
          }
        );
        allPlacemarks.push(placemark);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    if (allPlacemarks.length > 0) {
      clusterer.add(allPlacemarks);
      console.log(
        `üîÑ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${allPlacemarks.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä`
      );

      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü
      setTimeout(() => {
        try {
          const geoObjects = clusterer.getGeoObjects();
          const clusters = clusterer.getClusters();
          console.log(`üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞:`);
          console.log(`   - –û–±—ä–µ–∫—Ç—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–µ: ${geoObjects.length}`);
          console.log(`   - –ö–ª–∞—Å—Ç–µ—Ä—ã: ${clusters.length}`);
          console.log(`   - –¢–µ–∫—É—â–∏–π –∑—É–º: ${map.getZoom()}`);
          console.log(`   - –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã: ${map.getCenter()}`);
          console.log(
            `   - –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ: ${
              map.geoObjects.get(0) === clusterer
            }`
          );
          // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö API)
          try {
            console.log(
              `   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞:`,
              clusterer.state ? clusterer.state.get("ready") : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            );
          } catch (stateError) {
            console.log(`   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
          }

          // –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          if (allPlacemarks.length > 0) {
            try {
              const firstCoords = allPlacemarks[0].geometry.getCoordinates();
              console.log(
                `   - –ü–µ—Ä–≤—ã–π –º–∞—Ä–∫–µ—Ä: [${firstCoords[0]}, ${firstCoords[1]}]`
              );
            } catch (coordError) {
              console.log(
                `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞:`,
                coordError
              );
            }
          }

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏)
          const currentCenter = map.getCenter();
          const isDefaultPosition =
            Math.abs(currentCenter[0] - MAP_CONFIG.DEFAULT_CENTER[0]) < 0.1 &&
            Math.abs(currentCenter[1] - MAP_CONFIG.DEFAULT_CENTER[1]) < 0.1;

          if (isDefaultPosition) {
            try {
              const bounds = clusterer.getBounds();
              if (bounds && bounds.length === 2) {
                map.setBounds(bounds, {
                  checkZoomRange: true,
                  zoomMargin: 50,
                });
                console.log(
                  `üó∫Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)`
                );
              }
            } catch (boundsError) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü:`, boundsError);
            }
          }
        } catch (error) {
          console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–∞:`, error);
        }
      }, 500);
    }

    visibleNodesCount.value = devices.value.length;
  } else {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤

    // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä
    if (clusterer) {
      clusterer.removeAll();
      console.log(`üîÑ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã: –æ—á–∏—â–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä`);
    }

    // –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    for (const [deviceId, markerData] of currentMarkers.entries()) {
      if (!clusteredMarkers.has(deviceId)) {
        map.geoObjects.remove(markerData.placemark);
      }
    }
    currentMarkers.clear();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    const visibleDevices = getVisibleDevices();
    visibleDevices.forEach((device) => {
      updateSingleDeviceMarker(device);
    });

    visibleNodesCount.value = currentMarkers.size;
  }

  const currentZoom = map.getZoom();
  console.log(
    `${
      useClustering ? "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è" : "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã"
    } (–∑—É–º ${currentZoom}): –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${visibleNodesCount.value} –∏–∑ ${
      devices.value.length
    } —É—Å—Ç—Ä–æ–π—Å—Ç–≤`
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ viewport)
const createDeviceMarkers = switchMarkerMode;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
const updateDeviceMarkers = async () => {
  await fetchDevicesDataStreaming();

  // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  if (clusterer) {
    clusterer.removeAll();
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
  switchMarkerMode();
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ API
let apiLoadPromise = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API
const loadYandexMaps = () => {
  // –ï—Å–ª–∏ API —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (window.ymaps && window.ymaps.ready) {
    return Promise.resolve(window.ymaps);
  }

  // –ï—Å–ª–∏ API —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–∏—Å
  if (apiLoadPromise) {
    return apiLoadPromise;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API
  apiLoadPromise = new Promise((resolve, reject) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!CONFIG.YANDEX_MAPS_API_KEY) {
      reject(
        new Error("‚ùå API –∫–ª—é—á Yandex Maps –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
    const existingScript = document.querySelector(
      'script[src*="api-maps.yandex.ru"]'
    );
    if (existingScript) {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
      existingScript.onload = () => {
        if (window.ymaps) {
          // console.info(
          //   "‚úÖ Yandex Maps API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)"
          // );
          resolve(window.ymaps);
        } else {
          reject(new Error("Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"));
        }
      };
      return;
    }

    const script = document.createElement("script");
    script.src = `${CONFIG.YANDEX_MAPS_API_URL}&apikey=${CONFIG.YANDEX_MAPS_API_KEY}`;
    script.async = true;

    script.onload = () => {
      if (window.ymaps) {
        console.info("‚úÖ Yandex Maps API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");
        resolve(window.ymaps);
      } else {
        reject(new Error("Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"));
      }
    };

    script.onerror = () => {
      console.warn("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API");
      apiLoadPromise = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      reject(new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API"));
    };

    document.head.appendChild(script);
  });

  return apiLoadPromise;
};

onMounted(async () => {
  const renderSelfBallon = (shouldSetCenter) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (shouldSetCenter) {
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ú–æ—Å–∫–≤–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      map.setCenter(MAP_CONFIG.DEFAULT_CENTER, MAP_CONFIG.DEFAULT_ZOOM);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const requestUserLocation = () => {
    let geolocation = ymaps.geolocation;
    geolocation
      .get({
        provider: "auto",
        mapStateAutoApply: false,
        timeout: 10000,
      })
      .then(function (result) {
        result.geoObjects.options.set("preset", MAP_PRESETS.GEOLOCATION);
        result.geoObjects
          .get(0)
          .properties.set({ balloonContentBody: "–í—ã –∑–¥–µ—Å—å!" });
        map.geoObjects.add(result.geoObjects);
        map.setCenter(result.geoObjects.get(0).geometry.getCoordinates(), 12);
        console.log("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞");
      })
      .catch(function (error) {
        console.log("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:", error.message);
      });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã (—Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º)
  const onMapChange = () => {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (redrawTimeout) {
        clearTimeout(redrawTimeout);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 300–º—Å
      redrawTimeout = setTimeout(() => {
        try {
          // –ù–µ –æ—á–∏—â–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
          switchMarkerMode();
        } catch (innerError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ onMapChange:", innerError);
        }
      }, 300);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ onMapChange:", error);
    }
  };

  const initYMap = () => {
    map = new ymaps.Map("map", {
      center: MAP_CONFIG.DEFAULT_CENTER,
      zoom: MAP_CONFIG.DEFAULT_ZOOM,
    });

    // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    map.controls.remove("fullscreenControl");
    map.controls.remove("searchControl");

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É INFO
    let infoButton = new ymaps.control.Button("INFO");
    map.controls.add(infoButton, {
      selectOnClick: false,
      float: "left",
      floatIndex: 1,
    });
    infoButton.events.add("click", function () {
      emit("infoOpen");
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
    map.events.add("boundschange", onMapChange);
    map.events.add("actionend", onMapChange);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑—É–º–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    map.events.add("boundschange", (e) => {
      try {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑—É–º–∞
        if (e.get("newZoom") !== e.get("oldZoom")) {
          setTimeout(() => {
            try {
              switchMarkerMode();
            } catch (switchError) {
              console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞:", switchError);
            }
          }, 200);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑—É–º–∞:", error);
      }
    });
  };

  const init = async () => {
    initYMap();
    renderSelfBallon(true); // true –æ–∑–Ω–∞—á–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä
    initClusterer();

    // –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await fetchDevicesData();
    switchMarkerMode(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
    updateInterval = setInterval(updateDeviceMarkers, 20000);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º Yandex Maps
  try {
    await loadYandexMaps();
    window.ymaps.ready(init);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps:", error);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
onUnmounted(() => {
  if (updateInterval) {
    clearInterval(updateInterval);
  }
  if (redrawTimeout) {
    clearTimeout(redrawTimeout);
  }
});
</script>

<style lang="scss">
// –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
.node-counter {
  position: absolute;
  bottom: 35px;
  left: 7px;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(5px);
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 600;
  color: #333;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  border: 1px solid rgba(0, 0, 0, 0.1);
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
  z-index: 1000;
  user-select: none;
  pointer-events: none;
}
</style>
